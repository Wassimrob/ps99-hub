name: Release APK

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses and install SDK
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Create Android project files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p app/src/main/java/com/pixelmon/utm/features/{tournament,team} app/src/main/res/values .github/workflows app

          cat > settings.gradle.kts << 'EOF'
          pluginManagement {
            repositories {
              google()
              mavenCentral()
              gradlePluginPortal()
            }
          }
          rootProject.name = "PixelmonUTM"
          include(":app")
          EOF

          cat > build.gradle.kts << 'EOF'
          plugins {
            id("com.android.application") version "8.5.2" apply false
            id("org.jetbrains.kotlin.android") version "1.9.24" apply false
          }
          @Suppress("UnstableApiUsage")
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories { google(); mavenCentral() }
          }
          EOF

          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          kotlin.code.style=official
          EOF

          cat > app/build.gradle.kts << 'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
          }
          android {
            namespace = "com.pixelmon.utm"
            compileSdk = 34
            defaultConfig {
              applicationId = "com.pixelmon.utm"
              minSdk = 24
              targetSdk = 34
              versionCode = 1
              versionName = "1.0.0"
              testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
              vectorDrawables { useSupportLibrary = true }
            }
            buildTypes {
              release {
                isMinifyEnabled = true
                proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
              }
              debug { isMinifyEnabled = false }
            }
            buildFeatures { compose = true; buildConfig = true }
            composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }
            packaging { resources.excludes += "/META-INF/{AL2.0,LGPL2.1}" }
            kotlinOptions { jvmTarget = "17" }
            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
          }
          dependencies {
            val composeBom = platform("androidx.compose:compose-bom:2024.09.00")
            implementation(composeBom)
            androidTestImplementation(composeBom)
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.activity:activity-compose:1.9.2")
            implementation("androidx.compose.ui:ui")
            implementation("androidx.compose.ui:ui-tooling-preview")
            implementation("androidx.compose.material3:material3:1.3.0")
            implementation("androidx.navigation:navigation-compose:2.8.0")
            debugImplementation("androidx.compose.ui:ui-tooling")
            debugImplementation("androidx.compose.ui:ui-test-manifest")
            testImplementation("junit:junit:4.13.2")
            androidTestImplementation("androidx.test.ext:junit:1.2.1")
            androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
            androidTestImplementation("androidx.compose.ui:ui-test-junit4")
          }
          EOF

          cat > app/proguard-rules.pro << 'EOF'
          -keep class kotlin.** { *; }
          -keep class androidx.compose.** { *; }
          -dontwarn org.jetbrains.annotations.**
          EOF

          mkdir -p app/src/main

          cat > app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <application
              android:allowBackup="true"
              android:label="Pixelmon UTM"
              android:icon="@android:drawable/sym_def_app_icon"
              android:supportsRtl="true"
              android:theme="@android:style/Theme.DeviceDefault">
              <activity
                android:name=".MainActivity"
                android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          cat > app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <string name="app_name">Pixelmon UTM</string>
          </resources>
          EOF

          mkdir -p app/src/main/java/com/pixelmon/utm/ui/theme

          cat > app/src/main/java/com/pixelmon/utm/MainActivity.kt << 'EOF'
          package com.pixelmon.utm
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.fillMaxSize
          import androidx.compose.material3.*
          import androidx.compose.runtime.Composable
          import androidx.compose.runtime.getValue
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.res.painterResource
          import androidx.navigation.NavGraph.Companion.findStartDestination
          import androidx.navigation.NavHostController
          import androidx.navigation.compose.NavHost
          import androidx.navigation.compose.composable
          import androidx.navigation.compose.currentBackStackEntryAsState
          import androidx.navigation.compose.rememberNavController
          import com.pixelmon.utm.features.team.TeamManagerScreen
          import com.pixelmon.utm.features.tournament.TournamentScreen
          import com.pixelmon.utm.ui.theme.PixelmonTheme
          class MainActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContent {
                PixelmonTheme {
                  Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
                    val navController = rememberNavController()
                    AppScaffold(navController = navController)
                  }
                }
              }
            }
          }
          private enum class AppDestination(val route: String, val label: String) {
            HOME("home", "Home"), TOURNAMENT("tournament", "Tournament"), TEAM_MANAGER("team", "UTM")
          }
          @Composable
          private fun AppScaffold(navController: NavHostController) {
            Scaffold(bottomBar = { BottomNavBar(navController = navController) }) { _ ->
              NavHost(navController = navController, startDestination = AppDestination.HOME.route) {
                composable(AppDestination.HOME.route) { Text("Pixelmon-inspired UI\nRandom Tournament + UTM") }
                composable(AppDestination.TOURNAMENT.route) { TournamentScreen(PaddingValues()) }
                composable(AppDestination.TEAM_MANAGER.route) { TeamManagerScreen(PaddingValues()) }
              }
            }
          }
          @Composable
          private fun BottomNavBar(navController: NavHostController) {
            val items = listOf(AppDestination.HOME, AppDestination.TOURNAMENT, AppDestination.TEAM_MANAGER)
            NavigationBar {
              val navBackStackEntry by navController.currentBackStackEntryAsState()
              val currentDestination = navBackStackEntry?.destination
              items.forEach { dest ->
                NavigationBarItem(
                  selected = currentDestination?.route == dest.route,
                  onClick = {
                    navController.navigate(dest.route) {
                      popUpTo(navController.graph.findStartDestination().id) { saveState = true }
                      launchSingleTop = true
                      restoreState = true
                    }
                  },
                  icon = { Icon(painter = painterResource(android.R.drawable.star_big_on), contentDescription = dest.label) },
                  label = { Text(dest.label) }
                )
              }
            }
          }
          EOF

          cat > app/src/main/java/com/pixelmon/utm/ui/theme/Theme.kt << 'EOF'
          package com.pixelmon.utm.ui.theme
          import androidx.compose.foundation.isSystemInDarkTheme
          import androidx.compose.material3.MaterialTheme
          import androidx.compose.material3.darkColorScheme
          import androidx.compose.material3.lightColorScheme
          import androidx.compose.runtime.Composable
          private val DarkColors = darkColorScheme()
          private val LightColors = lightColorScheme()
          @Composable
          fun PixelmonTheme(useDarkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -> Unit) {
            val colors = if (useDarkTheme) DarkColors else LightColors
            MaterialTheme(colorScheme = colors, content = content)
          }
          EOF

          cat > app/src/main/java/com/pixelmon/utm/features/tournament/BracketModels.kt << 'EOF'
          package com.pixelmon.utm.features.tournament
          import kotlin.random.Random
          data class Participant(val id: String, val displayName: String)
          data class Match(val roundIndex: Int, val matchIndex: Int, val participantA: Participant?, val participantB: Participant?)
          data class Bracket(val rounds: List<List<Match>>)
          fun generateRandomBracket(participants: List<Participant>, random: Random = Random.Default): Bracket {
            require(participants.size >= 2) { "At least 2 participants required" }
            val nextPow2 = 1 shl (32 - Integer.numberOfLeadingZeros(participants.size - 1))
            val numByes = nextPow2 - participants.size
            val shuffled = participants.shuffled(random)
            val initialWithByes = buildList {
              addAll(shuffled)
              repeat(numByes) { add(Participant(id = "bye-$it", displayName = "BYE")) }
            }
            val rounds = mutableListOf<List<Match>>()
            var current = initialWithByes.chunked(2).mapIndexed { index, pair -> Match(0, index, pair.getOrNull(0), pair.getOrNull(1)) }
            rounds.add(current)
            var round = 1
            var size = current.size
            while (size > 1) {
              val next = (0 until size / 2).map { idx -> Match(round, idx, null, null) }
              rounds.add(next); size /= 2; round += 1
            }
            return Bracket(rounds)
          }
          EOF

          cat > app/src/main/java/com/pixelmon/utm/features/tournament/TournamentScreen.kt << 'EOF'
          package com.pixelmon.utm.features.tournament
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyColumn
          import androidx.compose.foundation.lazy.items
          import androidx.compose.material3.*
          import androidx.compose.runtime.Composable
          import androidx.compose.runtime.mutableStateListOf
          import androidx.compose.runtime.remember
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp
          import kotlin.random.Random
          @Composable
          fun TournamentScreen(paddingValues: PaddingValues) {
            val participants = remember { mutableStateListOf<Participant>() }
            val bracketState = remember { mutableStateListOf<List<Match>>() }
            Column(Modifier.fillMaxSize().padding(paddingValues).padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
              Text("Random Tournament (Smash MC style)", style = MaterialTheme.typography.titleLarge)
              val newName = remember { androidx.compose.runtime.mutableStateOf("") }
              Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(value = newName.value, onValueChange = { newName.value = it }, label = { Text("Add participant") }, modifier = Modifier.weight(1f))
                Button(onClick = {
                  val t = newName.value.trim()
                  if (t.isNotEmpty()) { participants.add(Participant(System.currentTimeMillis().toString() + Random.nextInt(), t)); newName.value = "" }
                }) { Text("Add") }
              }
              Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                Button(onClick = { if (participants.size >= 2) { val b = generateRandomBracket(participants); bracketState.clear(); bracketState.addAll(b.rounds) } }) { Text("Generate Bracket") }
                Button(onClick = { participants.clear(); bracketState.clear() }) { Text("Clear") }
              }
              Text("Participants: ${participants.size}")
              LazyColumn(verticalArrangement = Arrangement.spacedBy(6.dp)) {
                items(participants) { p -> Card { Text(p.displayName, modifier = Modifier.padding(12.dp)) } }
              }
              if (bracketState.isNotEmpty()) {
                Text("Bracket", style = MaterialTheme.typography.titleMedium)
                bracketState.forEachIndexed { roundIndex, matches ->
                  Text("Round ${roundIndex + 1}", style = MaterialTheme.typography.titleSmall)
                  matches.forEach { m ->
                    Card(modifier = Modifier.padding(vertical = 4.dp)) {
                      Row(modifier = Modifier.padding(12.dp)) {
                        Text((m.participantA?.displayName ?: "TBD") + " vs " + (m.participantB?.displayName ?: "TBD"))
                      }
                    }
                  }
                }
              }
            }
          }
          EOF

          cat > app/src/main/java/com/pixelmon/utm/features/team/TeamModels.kt << 'EOF'
          package com.pixelmon.utm.features.team
          data class Species(val id: String, val name: String)
          data class TeamMember(val species: Species, val nickname: String? = null)
          data class Team(val name: String, val members: List<TeamMember> = emptyList())
          EOF

          cat > app/src/main/java/com/pixelmon/utm/features/team/SpeciesData.kt << 'EOF'
          package com.pixelmon.utm.features.team
          object SpeciesDataRepository {
            val sampleSpecies: List<Species> = listOf(
              Species("001", "Leafaur"), Species("002", "Blazetail"), Species("003", "Aquafin"),
              Species("004", "Thunderimp"), Species("005", "Stonehorn"), Species("006", "Shadowpup"),
              Species("007", "Skywing"), Species("008", "Toxibug"), Species("009", "Frostling"), Species("010", "Pyromite")
            )
          }
          EOF

          cat > app/src/main/java/com/pixelmon/utm/features/team/TeamManagerScreen.kt << 'EOF'
          package com.pixelmon.utm.features.team
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyColumn
          import androidx.compose.foundation.lazy.items
          import androidx.compose.material3.*
          import androidx.compose.runtime.Composable
          import androidx.compose.runtime.mutableStateListOf
          import androidx.compose.runtime.remember
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp
          @Composable
          fun TeamManagerScreen(paddingValues: PaddingValues) {
            val teams = remember { mutableStateListOf<Team>() }
            val species = remember { SpeciesDataRepository.sampleSpecies }
            Column(Modifier.fillMaxSize().padding(paddingValues).padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
              Text("UTM: Team Manager", style = MaterialTheme.typography.titleLarge)
              val teamName = remember { androidx.compose.runtime.mutableStateOf("") }
              Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(value = teamName.value, onValueChange = { teamName.value = it }, label = { Text("New team name") }, modifier = Modifier.weight(1f))
                Button(onClick = { val n = teamName.value.trim(); if (n.isNotEmpty()) { teams.add(Team(name = n)); teamName.value = "" } }) { Text("Create") }
              }
              Text("Teams: ${teams.size}")
              LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                items(teams) { team ->
                  Card(modifier = Modifier.padding(vertical = 4.dp)) {
                    Column(modifier = Modifier.padding(12.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
                      Text(team.name, style = MaterialTheme.typography.titleMedium)
                      Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                        species.take(6).forEach { sp ->
                          Button(onClick = {
                            val updated = team.members.toMutableList()
                            if (updated.size < 6) {
                              updated.add(TeamMember(species = sp))
                              val idx = teams.indexOf(team)
                              if (idx >= 0) teams[idx] = team.copy(members = updated)
                            }
                          }) { Text(sp.name) }
                        }
                        Button(onClick = {
                          val randomized = species.shuffled().take(6).map { TeamMember(it) }
                          val idx = teams.indexOf(team)
                          if (idx >= 0) teams[idx] = team.copy(members = randomized)
                        }) { Text("Random 6") }
                      }
                      if (team.members.isNotEmpty()) {
                        Text("Members:")
                        team.members.forEach { member -> Text("- ${member.species.name}") }
                      }
                    }
                  }
                }
              }
            }
          }
          EOF

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          arguments: assembleDebug

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: debug-latest
          files: app/build/outputs/apk/debug/app-debug.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
