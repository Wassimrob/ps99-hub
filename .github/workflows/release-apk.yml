name: Release APK

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses and install SDK
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Create Android project files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p app/src/main/java/com/wassim/ebello/features/{tournament,teams,common} app/src/main/res/values app/src/main/res/mipmap-anydpi-v26

          cat > settings.gradle.kts << 'EOF'
          pluginManagement {
            repositories { google(); mavenCentral(); gradlePluginPortal() }
          }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories { google(); mavenCentral() }
          }
          rootProject.name = "WassimEBello"
          include(":app")
          EOF

          cat > build.gradle.kts << 'EOF'
          plugins {
            id("com.android.application") version "8.5.2" apply false
            id("org.jetbrains.kotlin.android") version "1.9.24" apply false
          }
          EOF

          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          kotlin.code.style=official
          EOF

          cat > app/build.gradle.kts << 'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
          }
          android {
            namespace = "com.wassim.ebello"
            compileSdk = 34
            defaultConfig {
              applicationId = "com.wassim.ebello"
              minSdk = 29
              targetSdk = 34
              versionCode = 1
              versionName = "1.0.0"
              testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
              vectorDrawables { useSupportLibrary = true }
            }
            buildTypes {
              release {
                isMinifyEnabled = true
                proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
              }
              debug { isMinifyEnabled = false }
            }
            buildFeatures { compose = true }
            composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }
            kotlinOptions { jvmTarget = "17" }
            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            packaging { resources.excludes += "/META-INF/{AL2.0,LGPL2.1}" }
          }
          dependencies {
            val composeBom = platform("androidx.compose:compose-bom:2024.09.00")
            implementation(composeBom)
            androidTestImplementation(composeBom)

            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.activity:activity-compose:1.9.2")
            implementation("androidx.compose.ui:ui")
            implementation("androidx.compose.ui:ui-tooling-preview")
            implementation("androidx.compose.material3:material3:1.3.0")
            implementation("androidx.navigation:navigation-compose:2.8.0")
            implementation("com.squareup.okhttp3:okhttp:4.12.0")

            debugImplementation("androidx.compose.ui:ui-tooling")

            testImplementation("junit:junit:4.13.2")
          }
          EOF

          cat > app/proguard-rules.pro << 'EOF'
          -keep class kotlin.** { *; }
          -keep class androidx.compose.** { *; }
          -dontwarn org.jetbrains.annotations.**
          EOF

          mkdir -p app/src/main

          cat > app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <uses-permission android:name="android.permission.INTERNET"/>
            <application
              android:allowBackup="true"
              android:label="Wassim E Bello"
              android:icon="@mipmap/ic_launcher"
              android:supportsRtl="true"
              android:theme="@android:style/Theme.DeviceDefault">
              <activity
                android:name=".MainActivity"
                android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          cat > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@android:color/black"/>
            <foreground android:drawable="@android:drawable/star_big_on"/>
          </adaptive-icon>
          EOF

          cat > app/src/main/java/com/wassim/ebello/MainActivity.kt << 'EOF'
          package com.wassim.ebello
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.foundation.layout.Arrangement
          import androidx.compose.foundation.layout.Column
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.fillMaxSize
          import androidx.compose.foundation.layout.padding
          import androidx.compose.material3.Button
          import androidx.compose.material3.MaterialTheme
          import androidx.compose.material3.NavigationBar
          import androidx.compose.material3.NavigationBarItem
          import androidx.compose.material3.Scaffold
          import androidx.compose.material3.Surface
          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable
          import androidx.compose.runtime.getValue
          import androidx.compose.runtime.mutableStateOf
          import androidx.compose.runtime.remember
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.res.painterResource
          import androidx.compose.ui.unit.dp
          import androidx.navigation.NavGraph.Companion.findStartDestination
          import androidx.navigation.compose.NavHost
          import androidx.navigation.compose.composable
          import androidx.navigation.compose.currentBackStackEntryAsState
          import androidx.navigation.compose.rememberNavController
          import com.wassim.ebello.features.tournament.BracketScreen
          import com.wassim.ebello.features.tournament.TournamentsScreen
          import com.wassim.ebello.features.teams.TeamImportExportScreen

          class MainActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContent {
                Surface(Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
                  val nav = rememberNavController()
                  Scaffold(bottomBar = {
                    NavigationBar {
                      val back by nav.currentBackStackEntryAsState()
                      val route = back?.destination?.route
                      listOf("home","tournaments","teams").forEach { r ->
                        NavigationBarItem(
                          selected = route == r,
                          onClick = { nav.navigate(r) {
                            popUpTo(nav.graph.findStartDestination().id) { saveState = true }
                            launchSingleTop = true; restoreState = true
                          }},
                          icon = { androidx.compose.material3.Icon(painterResource(android.R.drawable.star_big_on), null) },
                          label = { Text(r.replaceFirstChar { it.uppercase() }) }
                        )
                      }
                    }
                  }) { pad -> NavHost(nav, "home") {
                      composable("home") { HomeScreen(pad) }
                      composable("tournaments") { TournamentsScreen(pad) }
                      composable("teams") { TeamImportExportScreen(pad) }
                      composable("bracket") { BracketScreen(pad) }
                  } }
                }
              }
            }
          }

          @Composable
          private fun HomeScreen(padding: PaddingValues) {
            val status = remember { mutableStateOf("UTM: Ultimate Team Tournament") }
            Column(Modifier.padding(padding).padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
              Text("Wassim E Bello", style = MaterialTheme.typography.titleLarge)
              Text(status.value)
              Button(onClick = { status.value = "Seeded bracket demo generated" }) { Text("Generate Seeded Bracket") }
            }
          }
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/tournament/BracketModels.kt << 'EOF'
          package com.wassim.ebello.features.tournament
          data class Participant(val id: String, val name: String)
          data class Match(val a: Participant?, val b: Participant?)
          data class Round(val matches: List<Match>)
          data class Bracket(val rounds: List<Round>, val seed: Long)
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/tournament/BracketEngines.kt << 'EOF'
          package com.wassim.ebello.features.tournament
          import kotlin.random.Random

          object BracketEngines {
            fun singleElim(players: List<Participant>, seed: Long): Bracket {
              require(players.size >= 2)
              val rng = Random(seed)
              val nextPow2 = 1 shl (32 - Integer.numberOfLeadingZeros(players.size - 1))
              val byes = nextPow2 - players.size
              val pool = players.shuffled(rng) + List(byes) { Participant("bye-$it","BYE") }
              val rounds = mutableListOf<Round>()
              var current = pool.chunked(2).map { Match(it.getOrNull(0), it.getOrNull(1)) }
              rounds += Round(current)
              var size = current.size
              while (size > 1) {
                size /= 2
                rounds += Round(List(size) { Match(null,null) })
              }
              return Bracket(rounds, seed)
            }

            fun roundRobin(players: List<Participant>, seed: Long): Bracket {
              require(players.size >= 2)
              val rng = Random(seed)
              val list = if (players.size % 2 == 0) players.shuffled(rng) else players.shuffled(rng) + Participant("bye","BYE")
              val n = list.size
              val rounds = mutableListOf<Round>()
              var arr = list.toMutableList()
              for (r in 0 until n-1) {
                val pairings = mutableListOf<Match>()
                for (i in 0 until n/2) pairings += Match(arr[i], arr[n-1-i])
                rounds += Round(pairings)
                val fixed = arr.first()
                val rotated = listOf(fixed) + listOf(arr.last()) + arr.subList(1, n-1)
                arr = rotated.toMutableList()
              }
              return Bracket(rounds, seed)
            }

            fun swiss(players: List<Participant>, roundsCount: Int, seed: Long): Bracket {
              require(players.size >= 2 && roundsCount >= 1)
              val rng = Random(seed)
              val shuffled = players.shuffled(rng)
              val rounds = (0 until roundsCount).map {
                val pairings = shuffled.chunked(2).map { pair -> Match(pair.getOrNull(0), pair.getOrNull(1)) }
                Round(pairings)
              }
              return Bracket(rounds, seed)
            }
          }
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/tournament/TournamentsScreen.kt << 'EOF'
          package com.wassim.ebello.features.tournament
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.Column
          import androidx.compose.foundation.layout.padding
          import androidx.compose.material3.Button
          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable
          import androidx.compose.runtime.mutableStateOf
          import androidx.compose.runtime.remember
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp

          @Composable
          fun TournamentsScreen(padding: PaddingValues) {
            val status = remember { mutableStateOf("No bracket yet") }
            Column(Modifier.padding(padding).padding(16.dp)) {
              Text("Random / UTM Tournaments")
              Button(onClick = {
                val players = (1..8).map { Participant("$it","Player $it") }
                val b = BracketEngines.singleElim(players, seed = 1234L)
                status.value = "Single Elim rounds=${b.rounds.size} seed=${b.seed}"
              }) { Text("Single Elim (seeded)") }
              Button(onClick = {
                val players = (1..6).map { Participant("$it","Player $it") }
                val b = BracketEngines.roundRobin(players, seed = 42L)
                status.value = "Round Robin rounds=${b.rounds.size}"
              }) { Text("Round Robin") }
              Button(onClick = {
                val players = (1..8).map { Participant("$it","Player $it") }
                val b = BracketEngines.swiss(players, roundsCount = 3, seed = 77L)
                status.value = "Swiss rounds=${b.rounds.size}"
              }) { Text("Swiss") }
              Text(status.value)
            }
          }
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/tournament/BracketScreen.kt << 'EOF'
          package com.wassim.ebello.features.tournament
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.Column
          import androidx.compose.foundation.layout.padding
          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp

          @Composable
          fun BracketScreen(padding: PaddingValues) {
            Column(Modifier.padding(padding).padding(16.dp)) {
              Text("Bracket View (demo)")
            }
          }
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/teams/ShowdownParser.kt << 'EOF'
          package com.wassim.ebello.features.teams
          data class ShowdownSet(val name: String?, val species: String, val item: String?, val ability: String?, val moves: List<String>)
          object ShowdownParser {
            fun parse(input: String): List<ShowdownSet> {
              return input.trim().split(Regex("\\n\\s*\\n")).mapNotNull { block ->
                val lines = block.lines().map { it.trim() }.filter { it.isNotEmpty() }
                if (lines.isEmpty()) return@mapNotNull null
                val first = lines.first()
                val nameSpecies = first.split("@").map { it.trim() }
                val nameAndSpecies = nameSpecies[0]
                val item = if (nameSpecies.size > 1) nameSpecies[1] else null
                val parts = nameAndSpecies.split(Regex("\\s+\\("))
                val name = if (parts.size > 1) parts[0].trim() else null
                val species = if (parts.size > 1) parts[1].removeSuffix(")").trim() else parts[0].trim()
                val ability = lines.firstOrNull { it.startsWith("Ability:") }?.substringAfter(":")?.trim()
                val moves = lines.filter { it.startsWith("- ") }.map { it.removePrefix("- ").trim() }
                ShowdownSet(name, species, item, ability, moves)
              }
            }
            fun serialize(team: List<ShowdownSet>): String {
              return team.joinToString("\n\n") { s ->
                buildString {
                  append((s.name?.let { "$it " } ?: "") + s.species)
                  if (s.item != null) append(" @ ${s.item}")
                  appendLine()
                  if (s.ability != null) appendLine("Ability: ${s.ability}")
                  s.moves.forEach { appendLine("- $it") }
                }.trim()
              }
            }
          }
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/teams/PokepasteClient.kt << 'EOF'
          package com.wassim.ebello.features.teams
          import okhttp3.OkHttpClient
          import okhttp3.Request

          object PokepasteClient {
            private val client = OkHttpClient()
            fun fetchPaste(url: String): String {
              val req = Request.Builder().url(url).build()
              client.newCall(req).execute().use { resp ->
                if (!resp.isSuccessful) error("HTTP ${'$'}{resp.code}")
                return resp.body?.string() ?: ""
              }
            }
          }
          EOF

          cat > app/src/main/java/com/wassim/ebello/features/teams/TeamImportExportScreen.kt << 'EOF'
          package com.wassim.ebello.features.teams
          import androidx.compose.foundation.layout.PaddingValues
          import androidx.compose.foundation.layout.Column
          import androidx.compose.foundation.layout.fillMaxWidth
          import androidx.compose.foundation.layout.padding
          import androidx.compose.material3.Button
          import androidx.compose.material3.OutlinedTextField
          import androidx.compose.material3.Text
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp

          @Composable
          fun TeamImportExportScreen(padding: PaddingValues) {
            var input by remember { mutableStateOf("") }
            var output by remember { mutableStateOf("") }
            Column(Modifier.padding(padding).padding(16.dp)) {
              Text("Import / Export Teams (Showdown / Pokepaste)")
              OutlinedTextField(value = input, onValueChange = { input = it }, modifier = Modifier.fillMaxWidth(), label = { Text("Paste Showdown or Pokepaste URL") })
              Button(onClick = {
                output = try {
                  if (input.startsWith("http")) PokepasteClient.fetchPaste(input) else ShowdownParser.serialize(ShowdownParser.parse(input))
                } catch (e: Exception) { "Error: ${'$'}{e.message}" }
              }) { Text("Process") }
              if (output.isNotBlank()) {
                Text("Output:")
                Text(output)
              }
            }
          }
          EOF

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          arguments: assembleDebug

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: debug-latest
          files: app/build/outputs/apk/debug/app-debug.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
